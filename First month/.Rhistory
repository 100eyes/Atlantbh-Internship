print("Hello world")
print("Hello world", quote = FALSE)
print("Hello world!", quote = FALSE)
print("Hello world!", quote = FALSE)
sd(c(5,8,12))
which.min(c(4,1,6))
install.packages("visdat")
install.packages("visdat")
install.packages("visdat")
install.packages("visdat")
install.packages("naniar")
load("/home/besim//Documents/Atlant praksa/Atlantbh-Internship/First month/business_dataframe.RData")
is.na(business) <- sapply(business, is.empty(""))
is.empty("")
is.na(business) <- sapply(business, is_empty(business))
library(naniar)
? replace_with_na_all
replace_with_na_all(business, !is.na(business))
replace_with_na_all(data = business, condition = !is.na(business))
replace_with_na_all(data = business, condition = ~ !is.na(business))
? map_if
View(business)
replace_with_na_all(data = business, condition = ~ !is.na(.neighborhood))
replace_with_na_all(data = business, condition = ~ !is.na(business.neighborhood))
replace_with_na_all(data = business, condition = ~ !is.na(business$neighborhood))
a <- [NA 1 2 3 4 NA 6 7 NA 9 NA 10 NA 12 NA 13 NA NA]
a <- C(NA 1 2 3 4 NA 6 7 NA 9 NA 10 NA 12 NA 13 NA NA)
a <- c(NA 1 2 3 4 NA 6 7 NA 9 NA 10 NA 12 NA 13 NA NA)
a <- c(NA, 1, 2, 3, 4, NA, 6, 7, NA, 9, NA, 10, NA, 12, NA, 13, NA, NA)
a[is.na(a)]
a[!is.na(a)]
b = c(NA, NA, "", "a", "", "", "b", NA, NA, "", "c", "d", "", "e", NA, "ab", "l", NA)
test = rbind(a, b)
test
test[!is.na(test)]
test[!is.na(test)] == ""
replace_with_na_all(data = business, condition = ~ business[!is.na(business)] == "")
replace_with_na_all(business, ~ business[!is.na(business)] == "")
proba <-  test[!is.na(test)] == ""
class(proba)
replace_with_na_all(business, ~ business[!is.na(business)] == "")
? replace_with_na_all
? replace_with_na
proba <-  test[!is.na(test)]
class(proba)
class(as.list(proba)
)
as.list(proba)
class(proba)
replace_with_na(business, replace = as.list(business[!is.na(business)]))
as.list(proba) == ""
replace_with_na(business, replace = as.list(business[!is.na(business)] == ""))
as.list(proba == "")
nesto <-  business[!is.na(business)] == ""
business <-  replace_with_na(business, replace = as.list(business[!is.na(business)] == ""))
View(business)
business <-  replace_with_na(business, replace = as.list(business$neighborhood[!is.na(business$neighborhood)] == ""))
View(business)
business <- replace_with_na_all(business, ~.neighborhood == "")
? replace_with_na_if
replace_with_na_if(business, .predicate = is.character, condition = ~.neighborhood $in$ common_na_strings)
replace_with_na_if(business, .predicate = is.character, condition = ~.neighborhood %in% common_na_strings)
replace_with_na_if(business, .predicate = is.character, condition = ~neighborhood %in% common_na_strings)
replace_with_na_if(business, .predicate = is.character, condition = .neighborhood %in% common_na_strings)
replace_with_na_if(business, .predicate = is.character, condition = neighborhood %in% common_na_strings)
replace_with_na_if(business, .predicate = is.character, condition = ~business$neighborhood %in% common_na_strings)
replace_with_na_if(business, .predicate = is.character, condition = ~.business$neighborhood %in% common_na_strings)
replace_with_na_if(business, .predicate = is.character, condition = ~.address %in% common_na_strings)
replace_with_na_ifdata =  business, .predicate = is.character, condition = ~.address %in% common_na_strings)
replace_with_na_if(data =  business, .predicate = is.character, condition = ~.address %in% common_na_strings)
replace_with_na_if(data =  business, .predicate = is.character, condition = ~business %in% common_na_strings)
? gsub
gsub("", NA, business)
View(business)
proba
test
gsub("", NA, test)
test
test <- gsub("", NA, test)
test
test <- rbind(a, b)
test
? apply
apply(test, gsub("", NA, test))
apply(test, , gsub("", NA, test))
? gsub
apply(test, , gsub, pattern = "", replacement = NA, x = "test")
apply(test, 2, 18, gsub, pattern = "", replacement = NA, x = "test")
apply(test, c(2, 18), gsub, pattern = "", replacement = NA, x = "test")
replace_with_na(business, replace = list(business == ""))
replace_with_na(business, replace = list(business = ""))
replace_with_na(business, replace = list(neighborhood == ""))
replace_with_na(business, replace = list(business$neighborhood == ""))
replace_with_na(business, replace = list(business$neighborhood = ""))
business[business==""] <- NA
provjera = is.na(business)
rm(provjera)
business[business==""]
ima_li <- business[busi]
ima_li <- business[business==""]
library(visdat)
vis_dat(business)
vis_dat(copy_of_business)
? vis_dat
vis_dat(copy_of_business, warn_large_data = FALSE)
vis_dat(copy_of_business[1:1000], warn_large_data = FALSE)
setwd("/home/besim/Documents/Atlant praksa/Atlantbh-Internship")
setwd("/home/besim/Documents/Atlant praksa/Atlantbh-Internship/First month")
library(readr)
yelp_business <- read_delim("yelp_business.csv",
"#", escape_double = FALSE, trim_ws = TRUE)
View(yelp_business)
# checking num of empty values
na_num = sapply(yelp_business, function(x) sum(is.na(x)))
total_nas = sum(na_num)
# Total completeness of database in percents
dummy_percent = total_nas/(nrow(yelp_business)*ncol(yelp_business))*100
which.max(na_num)
which.min(na_num)
# Percentage of completeness by attributes
percent_by_column <- na_num/nrow(na_num)*100
View(percent_by_column)
# Percentage of completeness by attributes
percent_by_column <- na_num[,]/nrow(na_num)*100
# Percentage of completeness by attributes
percent_by_column <- na_num[]/nrow(na_num)*100
# Percentage of completeness by attributes
percent_by_column <- na_num[:]/nrow(na_num)*100
na_num[0]
na_num[1]
# Percentage of completeness by attributes
percent_by_column <- na_num[1:ncol(nrow(na_num))]/nrow(na_num)*100
# Percentage of completeness by attributes
percent_by_column <- na_num[1:nrow(na_num)]/nrow(na_num)*100
1:nrow(na_num)
1:100
nrow(na_num)
dim(na_num)
class(na_num)
length(na_num)
# Percentage of completeness by attributes
percent_by_column <- na_num[1:length(na_num)]/nrow(yelp_business)*100
which.max(percent_by_column)
which.min(percent_by_column)
View(percent_by_column)
important_attributes = percent_by_column[c("name", "address", "city", "state", "longitude", "latitude")]
View(important_attributes)
table(yelp_business$city)
tail(table(yelp_business$state))
tail(table(yelp_business$city))
tail(yelp_business$longitude)
tail(yelp_business$latitude)
tail(table(yelp_business$longitude))
tail(table(yelp_business$latitude))
tail(table(yelp_business$address))
tail(table(yelp_business$city), n=2)
tail(table(yelp_business$city), n=4)
which.max(table(yelp_business$city))
tail(sort(table(yelp_business$city)), n=4)
tail(sort(table(yelp_business$state)))
Alabama, US
AL
Alaska, US
AK
Arizona, US
AZ
Arkansas, US
AR
Armed Forces America
AA
Armed Forces Europe
AE
Armed Forces Pacific
AP
California, US
CA
Colorado, US
CO
Connecticut, US
CT
Delaware, US
DE
District of Columbia, US
DC
Florida, US
FL
Georgia, US
GA
Hawaii, US
HI
Idaho, US
ID
Illinois, US
IL
Indiana, US
IN
Iowa, US
IA
Kansas, US
KS
Kentucky, US
KY
Louisiana, US
LA
Maine, US
ME
Maryland, US
MD
Massachusetts, US
MA
Michigan, US
MI
Minnesota, US
MN
Mississippi, US
MS
Missouri, US
MO
Montana, US
MT
Nebraska, US
NE
Nevada, US
NV
New Hampshire, US
NH
New Jersey, US
NJ
New Mexico, US
NM
New York, US
NY
North Carolina, US
NC
North Dakota, US
ND
Ohio, US
OH
Oklahoma, US
OK
Oregon, US
OR
Pennsylvania, US
PA
Rhode Island, US
RI
South Carolina, US
SC
South Dakota, US
SD
Tennessee, US
TN
Texas, US
TX
Utah, US
UT
Vermont, US
VT
Virginia, US
VA
Washington, US
WA
West Virginia, US
WV
Wisconsin, US
WI
Wyoming, US
WY
library(readr)
us_states <- read_csv("states.csv")
View(us_states)
us_business = yelp_business[which(yelp_business$state == us_states$Abbreviation)]
us_business = yelp_business[which(yelp_business$state == us_states$Abbreviation),]
View(us_business)
which(yelp_business$state == us_states$Abbreviation)
length(which(yelp_business$state == us_states$Abbreviation))
length(which(yelp_business$state %in% us_states$Abbreviation))
us_business = yelp_business[which(yelp_business$state %in% us_states$Abbreviation),]
library(readr)
canada_states <- read_csv("canada_states.csv")
View(canada_states)
canada_business <- yelp_business[which(yelp_business$state %in% canada_states$Code),]
View(canada_business)
nrow(us_business)+nrow(canada_business)
table(yelp_business$state)
dummy_states <- yelp_business[which(!((yelp_business$state %in% us_states) | (yelp_business$state %in% canada_states))),]
dummy_states <- yelp_business[which(!(yelp_business$state %in% us_states)),]
View(dummy_states)
dummy_states <- yelp_business[which((!yelp_business$state %in% us_states)),]
dummy_states <- yelp_business[which(yelp_business$state %not_in% us_states),]
`%not_in%` <- purrr::negate(`%in%`)
dummy_states <- yelp_business[which(yelp_business$state %not_in% us_states),]
dummy_states <- yelp_business[which(!((yelp_business$state %in% us_states$Abbreviation) | (yelp_business$state %in% canada_states$Code))),]
nrow(us_business)+nrow(canada_business)+nrow(dummy_states)
nrow(us_business)+nrow(canada_business)+nrow(dummy_states) == nrow(yelp_business)
View(dummy_states)
table(dummy_states$state)
# Checking for duplicates in businessID and names
businessID_occur <- data.frame(table(yelp_business$business_id))
View(businessID_occur)
yelp_business[yelp_business$business_id %in% businessID_occur$Var1[businessID_occur$Freq > 1],]
temp <- yelp_business[yelp_business$business_id %in% businessID_occur$Var1[businessID_occur$Freq > 1],]
View(temp)
length(yelp_business[yelp_business$business_id %in% businessID_occur$Var1[businessID_occur$Freq > 1],])
nrow(yelp_business[yelp_business$business_id %in% businessID_occur$Var1[businessID_occur$Freq > 1],])
names_occur <- data.frame(table(yelp_business$name))
nrow(yelp_business[yelp_business$name %in% names_occur$Var1[names_occur$Freq >1],])
same_names <- yelp_business[yelp_business$name %in% names_occur$Var1[names_occur$Freq >1],]
nrow(same_names)
View(same_names)
tail(sort(table(yelp_business$name)), n=10)
tail(sort(table(same_names$name)), n=10)
